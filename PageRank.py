import matplotlib
import networkx as nx
import numpy as np

from PowerIterator import PowerIterator

a = 0
b = 0
c = 1 / 3
d = 1 / 2
e = 1 / 2
f = 1
g = 0
h = 1
i = 1 / 2
j = 1 / 3
k = 1 / 2
l = 1 / 2
m = 1 / 2
n = 1 / 2
o = 1 / 2

M = np.array([
    [0, 0, 0, d, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, j, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, i, j, 0, 0, 0, 0, o],
    [0, 0, 0, 0, e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, c, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, d, 0, f, 0, 0, 0, 0, 0, 0, m, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, k, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, h, 0, j, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, k, 0, 0, n, 0],
    [0, 0, c, 0, 0, 0, 0, 0, i, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, d, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, o],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l, 0, 0, 0],
    [0, 0, c, 0, e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, m, n, 0]
])
N_1 = np.array([
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15],
    [1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15, 1 / 15,
     1 / 15]
])


class PageRank:

    def __init__(self, m_matrix, n_matrix, betha, betha_1):
        self.m_matrix = m_matrix
        self.n_matrix = n_matrix
        self.betha = betha
        self.betha_1 = betha_1

    def plot_graph(self):
        nx.draw(G, with_labels=True)
        matplotlib.pyplot.show()

    def google_matrix(self):
        m_betha = np.dot(self.betha, self.m_matrix)
        m_betha_1 = np.dot(self.betha_1, self.n_matrix)
        return m_betha + m_betha_1


if __name__ == '__main__':
    page_rank = PageRank(m_matrix=M, n_matrix=N_1, betha=0.80, betha_1=0.20)
    G = nx.DiGraph(np.array(M).transpose())
    page_rank.plot_graph()
    A = page_rank.google_matrix()

    power_iterator = PowerIterator(M, N_1[0], G, A)
    power_iterator.run()
